// main global script file

function disable_guis()
{
  gMessageGui.Visible = false;
  gReviewGui.Visible = false;
  gSubmitGui.Visible = false;
}

function disable_gui_clicks()
{
  gMessageGui.Clickable = false;
  gReviewGui.Clickable = false;
  gSubmitGui.Clickable = false;
  TextPrompt.Enabled = false;
  TextPrompt.Visible = false;
}

function enable_gui_clicks()
{
  gMessageGui.Clickable = true;
  gReviewGui.Clickable = true;
  gSubmitGui.Clickable = true;
  if (gSubmitGui.Visible == true)
  {
    TextPrompt.Enabled = true;
    TextPrompt.Visible = true;
  }
}

// Object displays

function showReview(int number)
{    
  if (number >= 25)
  {
    number = 0;
  }
  
  String reasons[26];
  int i = 0;
  reasons[i] = ""; i++;
  
  //Tutorial
  reasons[i] = "A historic work of art. Man, laid bare before his creator."; i++;
  reasons[i] = "One of the first nude photographs. Taken by Julien Vallou de Villeneuve."; i++;
  reasons[i] = "A scene from one of the first pornographic films. Presented for its historical significance."; i++;
  reasons[i] = "A picture from my latest photoshoot"; i++;
  
  //User-submitted
  reasons[i] = "This picture doesn't even have nudity. Stupid algorithm."; i++;
  reasons[i] = "Sun and waves and a beautiful body. You wish this photo was in a museum."; i++;
  reasons[i] = "See how the light plays upon my body. A structured composition."; i++;
  reasons[i] = "A photographic study in image cropping and framing."; i++;
  
  reasons[i] = "Me in my first ever magazine appearance. A celebration of my femininity. #EmpoweredWomen"; i++;
  reasons[i] = "This is not nudity! This is how we dress."; i++;
  reasons[i] = "My body is a temple."; i++;
  reasons[i] = "This is for a professional photo shoot highlighting the male body. This is art!!"; i++;
  
  reasons[i] = "Check out this sweet air. Most definitely art."; i++;
  reasons[i] = "Showing off my lingerie. Fashion is art."; i++;
  reasons[i] = "Nude ballet. "; i++;
  reasons[i] = "A self portrait of the artist and his lover."; i++;
  
  reasons[i] = "Buds. Obviously art. I can't believe I have to type this."; i++;
  reasons[i] = "Reference image for figure drawing."; i++;
  reasons[i] = "Showing the beauty of my body. You can be beautiful no matter your age or body type."; i++;
  reasons[i] = "This is my body. It's not your place to judge if this is appropriate."; i++;
  
  reasons[i] = "A study of the differences between boys and girls."; i++;
  reasons[i] = "Anatomical picture of the vagina. Sending it to a classmate who missed lecture."; i++;
  reasons[i] = "Nudity alert? Take this for your nudity alert. Art! In your face!"; i++;
  reasons[i] = "Celebrating our bodies and our community at Pride!"; i++;
  
  //Picture sets stop here
  
  reasons[i] = "I'm a firefighter. This was taken for a fundraiser calendar supporting our fire station."; i++;
  
  object[currentObject].Visible = false;
  currentObject = number;
  object[currentObject].Visible = true;
  Explanation.Text = reasons[currentObject];
}

function showSubmit(int number)
{
  //map of index to object #
  int submissions[6];
  submissions[0] = 0;
  submissions[1] = 25;
  submissions[2] = 26;
  submissions[3] = 27;
  submissions[4] = 28;
  submissions[5] = 29;
  
  TextPrompt.Text = "";
  TextPrompt.Enabled = true;
  
  object[currentObject].Visible = false;
  currentObject = submissions[number];
  object[currentObject].Visible = true;
}

// Button toggles

function enableButton(Button *button, String color)
{
  if (color == "blue")
  {
    button.NormalGraphic = 5;
    button.MouseOverGraphic = 9;
    button.PushedGraphic = 11;
  }
  else if (color == "red")
  {
    
  }
  else if (color == "green")
  {
    
  }
  button.Clickable = true;
}

function disableButton(Button *button)
{
  button.NormalGraphic = 6;
  button.MouseOverGraphic = 6;
  button.PushedGraphic = 6;
  button.Clickable = false;
}

function enableImageButton()
{
  enableButton(ImageReply, "blue");
}

function enableTextButton()
{
  enableButton(TextReply, "blue");
}

function disableImageButton()
{
  disableButton(ImageReply);
}

function disableTextButton()
{
  disableButton(TextReply);
}

// Modal controls

function showModal(String text, int height)
{
  gPopupGui.Visible = true;
  disable_gui_clicks();
  
  int oldHeight = gPopupGui.Height;
  int offset = oldHeight - height;
  
  gPopupGui.Height = height;
  oModalText.Height = oModalText.Height - offset;
  oModalText.Text = text;
  modalButton.SetPosition(modalButton.X, modalButton.Y - offset);
}

// GUI goto

function goToReview()
{
  gMessageGui.Visible = false;
  showModal("Please review these photos for artistic significance before submitting your own.", 60);
  
  gReviewGui.Visible = true;
  showReview(reviewCount);
  disableImageButton();
}

function goToMessaging()
{
  showSubmit(0);
  gSubmitGui.Visible = false;
  gMessageGui.Visible = true;
}

function goToSubmit()
{
  submitNumber++;
  gReviewGui.Visible = false;
  showModal("Our algorithm has detected that your submitted image contains nudity. Please give your explanation for why this photo is of artistic significance.", 80);
  
  gSubmitGui.Visible = true;
  showReview(0);
  showSubmit(submitNumber);
}

function goToPending()
{
  showSubmit(0);
  goToMessaging();
}

// Click listeners

function onClickSendText(GUIControl *control, MouseButton button)
{
  textCount++;
  if (imageCount == 5)
  {
    endingMessageVisible = true;
    showModal("You account has been flagged as deviating from expected responses during the review process. This program will now terminate.", 80);
    return;
  }
  if (textCount < textCountThreshold)
  {
    disableImageButton();
  }
  else
  {
    enableImageButton();
    disableTextButton();
  }
}

function onClickSendImage(GUIControl *control, MouseButton button)
{
  if (textCount >= textCountThreshold)
  {
    textCount = 0;
    imageCount++;
    enableTextButton();
    goToReview();
  }
}

function onClickSubmit(GUIControl *control, MouseButton button)
{
  if (TextPrompt.Text.Length < 8)
  {
    showModal("Messages must be at least eight characters", 60);
    return;
  }
  goToPending();
}

function approveClick(GUIControl *control, MouseButton button)
{
  if (reviewCount == 4)
  {
    showModal(modalWarning4, 60);
    //TODO: warning about image that is not acceptable
  }
  else
  {
    
    if (reviewCount % 4 == 0)
    {
      reviewCount++;
      goToSubmit();
    }
    else
    {
      reviewCount++;
      showReview(reviewCount);
    }
  }
}

function rejectClick(GUIControl *control, MouseButton button)
{
  if (reviewCount == 1)
  {
    showModal(modalWarning1, 60);
    return;
  }
  else if (reviewCount == 2)
  {
  showModal(modalWarning2, 60);
    return;
  }
  else if (reviewCount == 3)
  {
    showModal(modalWarning3, 60);
    return;
  }
  else if (reviewCount == 4)
  {
    //Show tutorial complete
    showModal(tutorialCompleteMessage,  100);
    tutorialMessageVisible = true;
    reviewCount++;
    return;
  }
  else
  {
    if (reviewCount % 4 == 0)
    {
      reviewCount++;
      goToSubmit();
    }
    else
    {
      reviewCount++;
      showReview(reviewCount);
    }
  }
}

function closeModal(GUIControl *control, MouseButton button)
{
  if (tutorialMessage0Visible == true)
  {
    tutorialMessage0Visible = false;
    goToReview();
  }
  else if (tutorialMessageVisible == true)
  {
    showReview(0);
    tutorialMessageVisible = false;
    currentObject++;

    gReviewGui.Visible = false;
    gMessageGui.Visible = true;
    object[30].Visible = false;
  }
  else if (endingMessageVisible)
  {
    QuitGame(0);
  }
  
  gPopupGui.Visible = false;
  oModalText.Text = "";
  enable_gui_clicks();
}

// called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode) 
{
  if (IsGamePaused()) keycode = 0; // game paused, so don't react to keypresses
  
  if (keycode == eKeyCtrlQ) QuitGame(1); // Ctrl-Q
  if (keycode == eKeyF9) RestartGame(); // F9
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.pcx");  // F12
  if (keycode == eKeyCtrlS) Debug(0,0); // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV) Debug(1,0); // Ctrl-V, version
  if (keycode == eKeyCtrlA) Debug(2,0); // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX) Debug(3,0); // Ctrl-X, teleport to room
  
  if (keycode == eKey1)
  {
    disable_guis();
    gMessageGui.Visible = true;
  }
  
  if (keycode == eKey2)
  {
  }
}

function on_mouse_click(MouseButton button) // called when a mouse button is clicked. button is either LEFT or RIGHT
{
  if (IsGamePaused() == 1) // Game is paused, so do nothing (ie. don't allow mouse click)
  {
  }
  else if (button == eMouseLeft) 
  {
    Room.ProcessClick(mouse.x,mouse.y, mouse.Mode);
  }
}

// called when the game starts, before the first room is loaded
function game_start() 
{
  mouse.Visible = true;
  mouse.Mode = eModePointer;
  disable_guis();
  
  EmptyTextPrompt.Enabled = false;
  TextPrompt.Enabled = false;
  
  tutorialMessage0Visible = true;
  showModal(tutorialMessage,  100);
}

// put anything you want to happen every game cycle in here
function repeatedly_execute() 
{
}

// put here anything you want to happen every game cycle, even when the game is blocked
function repeatedly_execute_always() 
{
}

function dialog_request(int param) {
}